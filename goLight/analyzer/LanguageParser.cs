//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./LanguageParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACE=3, RBRACE=4, LBRACKET=5, RBRACKET=6, SEMICOLON=7, 
		DOT=8, COLON=9, COMMA=10, MAS=11, MENOS=12, MULTI=13, POTENCIA=14, DIV=15, 
		MODULO=16, ASIGSUM=17, ASIGMIN=18, INCREMENTO=19, DECREMENTO=20, IGUAL=21, 
		EQUALS=22, DIFF=23, MENOR=24, MENIGUAL=25, MAYOR=26, MAYIGUAL=27, OR=28, 
		AND=29, NOT=30, AMPERSAND=31, PRINT=32, FMT=33, VAR=34, DCLIMPL=35, IF=36, 
		ELSE=37, SWITCH=38, CASE=39, DEFAUL=40, FOR=41, RANGE=42, STBREAK=43, 
		STCONTINUE=44, STRETURN=45, STFUNC=46, STRUCT=47, STTYPE=48, NUEVO=49, 
		INT=50, FLOAT=51, STRING=52, BOOL=53, RUNE=54, T_INT=55, T_FLOAT=56, T_STR=57, 
		T_BOOL=58, T_RUNE=59, V_NULO=60, ID=61, WS=62, COMENT=63, MCOMENT=64;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_varDcl = 2, RULE_funcionDcl = 3, 
		RULE_parametrosF = 4, RULE_structDcl = 5, RULE_atriBody = 6, RULE_structFunc = 7, 
		RULE_sliceDcl = 8, RULE_dimension = 9, RULE_slcParam = 10, RULE_statement = 11, 
		RULE_exprList = 12, RULE_forInit = 13, RULE_rangeStmt = 14, RULE_caseStmt = 15, 
		RULE_expr = 16, RULE_call = 17, RULE_parametros = 18, RULE_initAttrList = 19, 
		RULE_initAttr = 20, RULE_tiposD = 21;
	public static readonly string[] ruleNames = {
		"program", "dcl", "varDcl", "funcionDcl", "parametrosF", "structDcl", 
		"atriBody", "structFunc", "sliceDcl", "dimension", "slcParam", "statement", 
		"exprList", "forInit", "rangeStmt", "caseStmt", "expr", "call", "parametros", 
		"initAttrList", "initAttr", "tiposD"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "':'", "','", 
		"'+'", "'-'", "'*'", "'^'", "'/'", "'%'", "'+='", "'-='", "'++'", "'--'", 
		"'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", "'!'", 
		"'&'", "'Println'", "'fmt'", "'var'", "':='", "'if'", "'else'", "'switch'", 
		"'case'", "'default'", "'for'", "'range'", "'break'", "'continue'", "'return'", 
		"'func'", "'struct'", "'type'", "'new'", null, null, null, null, null, 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
		"SEMICOLON", "DOT", "COLON", "COMMA", "MAS", "MENOS", "MULTI", "POTENCIA", 
		"DIV", "MODULO", "ASIGSUM", "ASIGMIN", "INCREMENTO", "DECREMENTO", "IGUAL", 
		"EQUALS", "DIFF", "MENOR", "MENIGUAL", "MAYOR", "MAYIGUAL", "OR", "AND", 
		"NOT", "AMPERSAND", "PRINT", "FMT", "VAR", "DCLIMPL", "IF", "ELSE", "SWITCH", 
		"CASE", "DEFAUL", "FOR", "RANGE", "STBREAK", "STCONTINUE", "STRETURN", 
		"STFUNC", "STRUCT", "STTYPE", "NUEVO", "INT", "FLOAT", "STRING", "BOOL", 
		"RUNE", "T_INT", "T_FLOAT", "T_STR", "T_BOOL", "T_RUNE", "V_NULO", "ID", 
		"WS", "COMENT", "MCOMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494646346722316298L) != 0)) {
				{
				{
				State = 44;
				dcl();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionDclContext funcionDcl() {
			return GetRuleContext<FuncionDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDclContext structDcl() {
			return GetRuleContext<StructDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFuncContext structFunc() {
			return GetRuleContext<StructFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceDclContext sliceDcl() {
			return GetRuleContext<SliceDclContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				funcionDcl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53;
				structDcl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54;
				structFunc();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55;
				sliceDcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
	 
		public VarDclContext() { }
		public virtual void CopyFrom(VarDclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDclStructContext : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDclStructContext(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDclStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDclStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDclStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDcl2Context : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDcl2Context(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDcl2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDcl2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDcl3Context : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCLIMPL() { return GetToken(LanguageParser.DCLIMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDcl3Context(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDcl3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDcl3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDcl1Context : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDcl1Context(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDcl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDcl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDcl);
		int _la;
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new VarDclStructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				Match(VAR);
				State = 59;
				Match(ID);
				State = 60;
				Match(ID);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 61;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				_localctx = new VarDcl1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				Match(VAR);
				State = 65;
				Match(ID);
				State = 66;
				tiposD();
				State = 67;
				Match(IGUAL);
				State = 68;
				expr(0);
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 69;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				_localctx = new VarDcl2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				Match(VAR);
				State = 73;
				Match(ID);
				State = 74;
				tiposD();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 75;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 4:
				_localctx = new VarDcl3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				Match(ID);
				State = 79;
				Match(DCLIMPL);
				State = 80;
				expr(0);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 81;
					Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STFUNC() { return GetToken(LanguageParser.STFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosFContext parametrosF() {
			return GetRuleContext<ParametrosFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public FuncionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcionDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFuncionDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFuncionDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionDclContext funcionDcl() {
		FuncionDclContext _localctx = new FuncionDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(STFUNC);
			State = 87;
			Match(ID);
			State = 88;
			Match(LPAREN);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 89;
				parametrosF();
				}
			}

			State = 92;
			Match(RPAREN);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1116892707587883008L) != 0)) {
				{
				State = 93;
				tiposD();
				}
			}

			State = 96;
			Match(LBRACE);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494646346722316298L) != 0)) {
				{
				{
				State = 97;
				dcl();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosFContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext[] tiposD() {
			return GetRuleContexts<TiposDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD(int i) {
			return GetRuleContext<TiposDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ParametrosFContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametrosF; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterParametrosF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitParametrosF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametrosF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosFContext parametrosF() {
		ParametrosFContext _localctx = new ParametrosFContext(Context, State);
		EnterRule(_localctx, 8, RULE_parametrosF);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(ID);
			State = 106;
			tiposD();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 107;
				Match(COMMA);
				State = 108;
				Match(ID);
				State = 109;
				tiposD();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STTYPE() { return GetToken(LanguageParser.STTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(LanguageParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtriBodyContext[] atriBody() {
			return GetRuleContexts<AtriBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtriBodyContext atriBody(int i) {
			return GetRuleContext<AtriBodyContext>(i);
		}
		public StructDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDclContext structDcl() {
		StructDclContext _localctx = new StructDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_structDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(STTYPE);
			State = 116;
			Match(ID);
			State = 117;
			Match(STRUCT);
			State = 118;
			Match(LBRACE);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 119;
				atriBody();
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtriBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		public AtriBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atriBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAtriBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAtriBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtriBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtriBodyContext atriBody() {
		AtriBodyContext _localctx = new AtriBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_atriBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(ID);
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_INT:
			case T_FLOAT:
			case T_STR:
			case T_BOOL:
			case T_RUNE:
				{
				State = 128;
				tiposD();
				}
				break;
			case ID:
				{
				State = 129;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STFUNC() { return GetToken(LanguageParser.STFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(LanguageParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(LanguageParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(LanguageParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(LanguageParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosFContext parametrosF() {
			return GetRuleContext<ParametrosFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public StructFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterStructFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitStructFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFuncContext structFunc() {
		StructFuncContext _localctx = new StructFuncContext(Context, State);
		EnterRule(_localctx, 14, RULE_structFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(STFUNC);
			State = 133;
			Match(LPAREN);
			State = 134;
			Match(ID);
			State = 135;
			Match(ID);
			State = 136;
			Match(RPAREN);
			State = 137;
			Match(ID);
			State = 138;
			Match(LPAREN);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 139;
				parametrosF();
				}
			}

			State = 142;
			Match(RPAREN);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1116892707587883008L) != 0)) {
				{
				State = 143;
				tiposD();
				}
			}

			State = 146;
			Match(LBRACE);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494646346722316298L) != 0)) {
				{
				{
				State = 147;
				dcl();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceDclContext : ParserRuleContext {
		public SliceDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceDcl; } }
	 
		public SliceDclContext() { }
		public virtual void CopyFrom(SliceDclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SlcDcl2Context : SliceDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCLIMPL() { return GetToken(LanguageParser.DCLIMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlcParamContext[] slcParam() {
			return GetRuleContexts<SlcParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SlcParamContext slcParam(int i) {
			return GetRuleContext<SlcParamContext>(i);
		}
		public SlcDcl2Context(SliceDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSlcDcl2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSlcDcl2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlcDcl2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SlcDcl1Context : SliceDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		public SlcDcl1Context(SliceDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSlcDcl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSlcDcl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlcDcl1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceDclContext sliceDcl() {
		SliceDclContext _localctx = new SliceDclContext(Context, State);
		EnterRule(_localctx, 16, RULE_sliceDcl);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				_localctx = new SlcDcl1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				Match(VAR);
				State = 156;
				Match(ID);
				State = 157;
				dimension();
				State = 158;
				tiposD();
				}
				break;
			case ID:
				_localctx = new SlcDcl2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				Match(ID);
				State = 161;
				Match(DCLIMPL);
				State = 162;
				dimension();
				State = 163;
				tiposD();
				State = 164;
				Match(LBRACE);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494230361959829514L) != 0)) {
					{
					{
					State = 165;
					slcParam();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171;
				Match(RBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(LanguageParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(LanguageParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(LanguageParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(LanguageParser.RBRACKET, i);
		}
		public DimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionContext dimension() {
		DimensionContext _localctx = new DimensionContext(Context, State);
		EnterRule(_localctx, 18, RULE_dimension);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(LBRACKET);
				State = 176;
				Match(RBRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				Match(LBRACKET);
				State = 178;
				Match(RBRACKET);
				State = 179;
				Match(LBRACKET);
				State = 180;
				Match(RBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlcParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext[] parametros() {
			return GetRuleContexts<ParametrosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros(int i) {
			return GetRuleContext<ParametrosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public SlcParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slcParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSlcParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSlcParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlcParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlcParamContext slcParam() {
		SlcParamContext _localctx = new SlcParamContext(Context, State);
		EnterRule(_localctx, 20, RULE_slcParam);
		int _la;
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case MENOS:
			case NOT:
			case NUEVO:
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
			case RUNE:
			case V_NULO:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				parametros();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(LBRACE);
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494230361959829506L) != 0)) {
					{
					{
					State = 185;
					parametros();
					}
					}
					State = 190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 191;
				Match(RBRACE);
				State = 192;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ST_continueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STCONTINUE() { return GetToken(LanguageParser.STCONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ST_continueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterST_continue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitST_continue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitST_continue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LanguageParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(LanguageParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext[] caseStmt() {
			return GetRuleContexts<CaseStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt(int i) {
			return GetRuleContext<CaseStmtContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ST_breakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STBREAK() { return GetToken(LanguageParser.STBREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ST_breakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterST_break(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitST_break(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitST_break(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(LanguageParser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(LanguageParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public PrintStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ExprStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BloqueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BloqueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForRangeStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeStmtContext rangeStmt() {
			return GetRuleContext<RangeStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ForRangeStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterForRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitForRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRangeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ST_returnContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRETURN() { return GetToken(LanguageParser.STRETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ST_returnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterST_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitST_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitST_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		int _la;
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				expr(0);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 196;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				Match(FMT);
				State = 200;
				Match(DOT);
				State = 201;
				Match(PRINT);
				State = 202;
				Match(LPAREN);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494230361959829506L) != 0)) {
					{
					State = 203;
					exprList();
					}
				}

				State = 206;
				Match(RPAREN);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 207;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				_localctx = new BloqueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 210;
				Match(LBRACE);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494646346722316298L) != 0)) {
					{
					{
					State = 211;
					dcl();
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 217;
				Match(RBRACE);
				}
				break;
			case 4:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 218;
				Match(IF);
				State = 220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 219;
					Match(LPAREN);
					}
					break;
				}
				State = 222;
				expr(0);
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 223;
					Match(RPAREN);
					}
				}

				State = 226;
				statement();
				State = 229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 227;
					Match(ELSE);
					State = 228;
					statement();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 231;
				Match(SWITCH);
				State = 232;
				expr(0);
				State = 233;
				Match(LBRACE);
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 234;
					caseStmt();
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CASE || _la==DEFAUL );
				State = 239;
				Match(RBRACE);
				}
				break;
			case 6:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 241;
				Match(FOR);
				State = 243;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 242;
					Match(LPAREN);
					}
					break;
				}
				State = 245;
				expr(0);
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 246;
					Match(RPAREN);
					}
				}

				State = 249;
				statement();
				}
				break;
			case 7:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 251;
				Match(FOR);
				State = 253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 252;
					Match(LPAREN);
					}
					break;
				}
				State = 255;
				forInit();
				State = 256;
				expr(0);
				State = 257;
				Match(SEMICOLON);
				State = 258;
				expr(0);
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 259;
					Match(RPAREN);
					}
				}

				State = 262;
				statement();
				}
				break;
			case 8:
				_localctx = new ForRangeStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 264;
				Match(FOR);
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 265;
					Match(LPAREN);
					}
				}

				State = 268;
				rangeStmt();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 269;
					Match(RPAREN);
					}
				}

				State = 272;
				statement();
				}
				break;
			case 9:
				_localctx = new ST_breakContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 274;
				Match(STBREAK);
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 275;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 10:
				_localctx = new ST_continueContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 278;
				Match(STCONTINUE);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 279;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 11:
				_localctx = new ST_returnContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 282;
				Match(STRETURN);
				State = 284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 283;
					expr(0);
					}
					break;
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 286;
					Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 24, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			expr(0);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 292;
				Match(COMMA);
				State = 293;
				expr(0);
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 26, RULE_forInit);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				expr(0);
				State = 301;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCLIMPL() { return GetToken(LanguageParser.DCLIMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(LanguageParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RangeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitRangeStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeStmtContext rangeStmt() {
		RangeStmtContext _localctx = new RangeStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_rangeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(ID);
			State = 306;
			Match(COMMA);
			State = 307;
			Match(ID);
			State = 308;
			Match(DCLIMPL);
			State = 309;
			Match(RANGE);
			State = 310;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
	 
		public CaseStmtContext() { }
		public virtual void CopyFrom(CaseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseDefaultContext : CaseStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAUL() { return GetToken(LanguageParser.DEFAUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public CaseDefaultContext(CaseStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseNormalContext : CaseStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(LanguageParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public CaseNormalContext(CaseStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCaseNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCaseNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseNormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_caseStmt);
		int _la;
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				_localctx = new CaseNormalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				Match(CASE);
				State = 313;
				expr(0);
				State = 314;
				Match(COLON);
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494646346722316298L) != 0)) {
					{
					{
					State = 315;
					dcl();
					}
					}
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DEFAUL:
				_localctx = new CaseDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(DEFAUL);
				State = 322;
				Match(COLON);
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494646346722316298L) != 0)) {
					{
					{
					State = 323;
					dcl();
					}
					}
					State = 328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LanguageParser.OR, 0); }
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI() { return GetToken(LanguageParser.MULTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(LanguageParser.MODULO, 0); }
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAS() { return GetToken(LanguageParser.MAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(LanguageParser.MENOS, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVarContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGSUM() { return GetToken(LanguageParser.ASIGSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGMIN() { return GetToken(LanguageParser.ASIGMIN, 0); }
		public AssignVarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssignVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssignVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateUContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(LanguageParser.MENOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		public NegateUContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterNegateU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitNegateU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateU(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValorNuloContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode V_NULO() { return GetToken(LanguageParser.V_NULO, 0); }
		public ValorNuloContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterValorNulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitValorNulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorNulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewStructInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCLIMPL() { return GetToken(LanguageParser.DCLIMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrListContext initAttrList() {
			return GetRuleContext<InitAttrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		public NewStructInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterNewStructInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitNewStructInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelacionalesContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR() { return GetToken(LanguageParser.MAYOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYIGUAL() { return GetToken(LanguageParser.MAYIGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR() { return GetToken(LanguageParser.MENOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENIGUAL() { return GetToken(LanguageParser.MENIGUAL, 0); }
		public RelacionalesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterRelacionales(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitRelacionales(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacionales(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(LanguageParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(LanguageParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public SliceContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LanguageParser.AND, 0); }
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewInstanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUEVO() { return GetToken(LanguageParser.NUEVO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public NewInstanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterNewInstan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitNewInstan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LlamadaContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public LlamadaContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterLlamada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitLlamada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlamada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateVarContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTO() { return GetToken(LanguageParser.INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTO() { return GetToken(LanguageParser.DECREMENTO, 0); }
		public UpdateVarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUpdateVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUpdateVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparationContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(LanguageParser.DIFF, 0); }
		public ComparationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterComparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitComparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				_localctx = new NegateUContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 332;
				((NegateUContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MENOS || _la==NOT) ) {
					((NegateUContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 333;
				expr(21);
				}
				break;
			case 2:
				{
				_localctx = new UpdateVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334;
				Match(ID);
				State = 335;
				((UpdateVarContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENTO || _la==DECREMENTO) ) {
					((UpdateVarContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new NewStructInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336;
				Match(ID);
				State = 337;
				Match(DCLIMPL);
				State = 338;
				Match(ID);
				State = 339;
				Match(LBRACE);
				State = 340;
				initAttrList();
				State = 341;
				Match(RBRACE);
				}
				break;
			case 4:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 343;
				Match(INT);
				}
				break;
			case 5:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 344;
				Match(FLOAT);
				}
				break;
			case 6:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 345;
				Match(STRING);
				}
				break;
			case 7:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346;
				Match(BOOL);
				}
				break;
			case 8:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 347;
				Match(RUNE);
				}
				break;
			case 9:
				{
				_localctx = new ValorNuloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 348;
				Match(V_NULO);
				}
				break;
			case 10:
				{
				_localctx = new SliceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 349;
				Match(ID);
				State = 350;
				Match(IGUAL);
				State = 351;
				dimension();
				State = 352;
				tiposD();
				State = 353;
				Match(LBRACE);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494230361959829506L) != 0)) {
					{
					State = 354;
					parametros();
					}
				}

				State = 357;
				Match(LBRACE);
				}
				break;
			case 11:
				{
				_localctx = new NewInstanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 359;
				Match(NUEVO);
				State = 360;
				Match(ID);
				State = 361;
				Match(LPAREN);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494230361959829506L) != 0)) {
					{
					State = 362;
					parametros();
					}
				}

				State = 365;
				Match(RPAREN);
				}
				break;
			case 12:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 366;
				Match(ID);
				}
				break;
			case 13:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 367;
				Match(LPAREN);
				State = 368;
				expr(0);
				State = 369;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 400;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 373;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 374;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 106496L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 375;
						expr(20);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 376;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 377;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MAS || _la==MENOS) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 378;
						expr(19);
						}
						break;
					case 3:
						{
						_localctx = new RelacionalesContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 379;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 380;
						((RelacionalesContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
							((RelacionalesContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 381;
						expr(18);
						}
						break;
					case 4:
						{
						_localctx = new ComparationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 382;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 383;
						((ComparationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUALS || _la==DIFF) ) {
							((ComparationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 384;
						expr(17);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 385;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 386;
						Match(AND);
						State = 387;
						expr(16);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 388;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 389;
						Match(OR);
						State = 390;
						expr(15);
						}
						break;
					case 7:
						{
						_localctx = new AssignVarContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 391;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 392;
						((AssignVarContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2490368L) != 0)) ) {
							((AssignVarContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 393;
						expr(14);
						}
						break;
					case 8:
						{
						_localctx = new LlamadaContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 394;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 396;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 395;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 398;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCallContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public FuncCallContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoSliceContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public AccesoSliceContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAccesoSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAccesoSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetAtrContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public GetAtrContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterGetAtr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitGetAtr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetAtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 34, RULE_call);
		int _la;
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new FuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(LPAREN);
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3494230361959829506L) != 0)) {
					{
					State = 406;
					parametros();
					}
				}

				State = 409;
				Match(RPAREN);
				}
				break;
			case DOT:
				_localctx = new GetAtrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				Match(DOT);
				State = 411;
				Match(ID);
				}
				break;
			case LBRACKET:
				_localctx = new AccesoSliceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 412;
				Match(LBRACKET);
				State = 413;
				expr(0);
				State = 414;
				Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 36, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			expr(0);
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 419;
				Match(COMMA);
				State = 420;
				expr(0);
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAttrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrContext[] initAttr() {
			return GetRuleContexts<InitAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrContext initAttr(int i) {
			return GetRuleContext<InitAttrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public InitAttrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAttrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInitAttrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInitAttrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAttrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAttrListContext initAttrList() {
		InitAttrListContext _localctx = new InitAttrListContext(Context, State);
		EnterRule(_localctx, 38, RULE_initAttrList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			initAttr();
			State = 427;
			Match(COMMA);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 428;
				initAttr();
				State = 429;
				Match(COMMA);
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAttrContext : ParserRuleContext {
		public InitAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAttr; } }
	 
		public InitAttrContext() { }
		public virtual void CopyFrom(InitAttrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitAttrExprContext : InitAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InitAttrExprContext(InitAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInitAttrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInitAttrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAttrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitAttrStructContext : InitAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrListContext initAttrList() {
			return GetRuleContext<InitAttrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		public InitAttrStructContext(InitAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInitAttrStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInitAttrStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAttrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAttrContext initAttr() {
		InitAttrContext _localctx = new InitAttrContext(Context, State);
		EnterRule(_localctx, 40, RULE_initAttr);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new InitAttrExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 436;
				Match(ID);
				State = 437;
				Match(COLON);
				State = 438;
				expr(0);
				}
				break;
			case 2:
				_localctx = new InitAttrStructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 439;
				Match(ID);
				State = 440;
				Match(COLON);
				State = 441;
				Match(ID);
				State = 442;
				Match(LBRACE);
				State = 443;
				initAttrList();
				State = 444;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiposDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_INT() { return GetToken(LanguageParser.T_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FLOAT() { return GetToken(LanguageParser.T_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_STR() { return GetToken(LanguageParser.T_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BOOL() { return GetToken(LanguageParser.T_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RUNE() { return GetToken(LanguageParser.T_RUNE, 0); }
		public TiposDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tiposD; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterTiposD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitTiposD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiposD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiposDContext tiposD() {
		TiposDContext _localctx = new TiposDContext(Context, State);
		EnterRule(_localctx, 42, RULE_tiposD);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1116892707587883008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 20);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,451,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,57,8,1,1,2,
		1,2,1,2,1,2,3,2,63,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,71,8,2,1,2,1,2,1,2,
		1,2,3,2,77,8,2,1,2,1,2,1,2,1,2,3,2,83,8,2,3,2,85,8,2,1,3,1,3,1,3,1,3,3,
		3,91,8,3,1,3,1,3,3,3,95,8,3,1,3,1,3,5,3,99,8,3,10,3,12,3,102,9,3,1,3,1,
		3,1,4,1,4,1,4,1,4,1,4,5,4,111,8,4,10,4,12,4,114,9,4,1,5,1,5,1,5,1,5,1,
		5,5,5,121,8,5,10,5,12,5,124,9,5,1,5,1,5,1,6,1,6,1,6,3,6,131,8,6,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,141,8,7,1,7,1,7,3,7,145,8,7,1,7,1,7,5,7,
		149,8,7,10,7,12,7,152,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,5,8,167,8,8,10,8,12,8,170,9,8,1,8,1,8,3,8,174,8,8,1,9,1,9,1,9,
		1,9,1,9,1,9,3,9,182,8,9,1,10,1,10,1,10,5,10,187,8,10,10,10,12,10,190,9,
		10,1,10,1,10,3,10,194,8,10,1,11,1,11,3,11,198,8,11,1,11,1,11,1,11,1,11,
		1,11,3,11,205,8,11,1,11,1,11,3,11,209,8,11,1,11,1,11,5,11,213,8,11,10,
		11,12,11,216,9,11,1,11,1,11,1,11,3,11,221,8,11,1,11,1,11,3,11,225,8,11,
		1,11,1,11,1,11,3,11,230,8,11,1,11,1,11,1,11,1,11,4,11,236,8,11,11,11,12,
		11,237,1,11,1,11,1,11,1,11,3,11,244,8,11,1,11,1,11,3,11,248,8,11,1,11,
		1,11,1,11,1,11,3,11,254,8,11,1,11,1,11,1,11,1,11,1,11,3,11,261,8,11,1,
		11,1,11,1,11,1,11,3,11,267,8,11,1,11,1,11,3,11,271,8,11,1,11,1,11,1,11,
		1,11,3,11,277,8,11,1,11,1,11,3,11,281,8,11,1,11,1,11,3,11,285,8,11,1,11,
		3,11,288,8,11,3,11,290,8,11,1,12,1,12,1,12,5,12,295,8,12,10,12,12,12,298,
		9,12,1,13,1,13,1,13,1,13,3,13,304,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,15,1,15,1,15,1,15,5,15,317,8,15,10,15,12,15,320,9,15,1,15,1,15,1,
		15,5,15,325,8,15,10,15,12,15,328,9,15,3,15,330,8,15,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,3,16,356,8,16,1,16,1,16,1,16,1,16,1,16,1,
		16,3,16,364,8,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,372,8,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,397,8,16,11,16,12,16,398,5,16,
		401,8,16,10,16,12,16,404,9,16,1,17,1,17,3,17,408,8,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,3,17,417,8,17,1,18,1,18,1,18,5,18,422,8,18,10,18,12,
		18,425,9,18,1,19,1,19,1,19,1,19,1,19,5,19,432,8,19,10,19,12,19,435,9,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,447,8,20,1,21,1,
		21,1,21,0,1,32,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,0,8,2,0,12,12,30,30,1,0,19,20,2,0,13,13,15,16,1,0,11,12,1,0,24,
		27,1,0,22,23,2,0,17,18,21,21,1,0,55,59,517,0,47,1,0,0,0,2,56,1,0,0,0,4,
		84,1,0,0,0,6,86,1,0,0,0,8,105,1,0,0,0,10,115,1,0,0,0,12,127,1,0,0,0,14,
		132,1,0,0,0,16,173,1,0,0,0,18,181,1,0,0,0,20,193,1,0,0,0,22,289,1,0,0,
		0,24,291,1,0,0,0,26,303,1,0,0,0,28,305,1,0,0,0,30,329,1,0,0,0,32,371,1,
		0,0,0,34,416,1,0,0,0,36,418,1,0,0,0,38,426,1,0,0,0,40,446,1,0,0,0,42,448,
		1,0,0,0,44,46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,
		1,0,0,0,48,1,1,0,0,0,49,47,1,0,0,0,50,57,3,4,2,0,51,57,3,6,3,0,52,57,3,
		22,11,0,53,57,3,10,5,0,54,57,3,14,7,0,55,57,3,16,8,0,56,50,1,0,0,0,56,
		51,1,0,0,0,56,52,1,0,0,0,56,53,1,0,0,0,56,54,1,0,0,0,56,55,1,0,0,0,57,
		3,1,0,0,0,58,59,5,34,0,0,59,60,5,61,0,0,60,62,5,61,0,0,61,63,5,7,0,0,62,
		61,1,0,0,0,62,63,1,0,0,0,63,85,1,0,0,0,64,65,5,34,0,0,65,66,5,61,0,0,66,
		67,3,42,21,0,67,68,5,21,0,0,68,70,3,32,16,0,69,71,5,7,0,0,70,69,1,0,0,
		0,70,71,1,0,0,0,71,85,1,0,0,0,72,73,5,34,0,0,73,74,5,61,0,0,74,76,3,42,
		21,0,75,77,5,7,0,0,76,75,1,0,0,0,76,77,1,0,0,0,77,85,1,0,0,0,78,79,5,61,
		0,0,79,80,5,35,0,0,80,82,3,32,16,0,81,83,5,7,0,0,82,81,1,0,0,0,82,83,1,
		0,0,0,83,85,1,0,0,0,84,58,1,0,0,0,84,64,1,0,0,0,84,72,1,0,0,0,84,78,1,
		0,0,0,85,5,1,0,0,0,86,87,5,46,0,0,87,88,5,61,0,0,88,90,5,1,0,0,89,91,3,
		8,4,0,90,89,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,94,5,2,0,0,93,95,3,
		42,21,0,94,93,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,100,5,3,0,0,97,99,
		3,2,1,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,
		103,1,0,0,0,102,100,1,0,0,0,103,104,5,4,0,0,104,7,1,0,0,0,105,106,5,61,
		0,0,106,112,3,42,21,0,107,108,5,10,0,0,108,109,5,61,0,0,109,111,3,42,21,
		0,110,107,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,
		9,1,0,0,0,114,112,1,0,0,0,115,116,5,48,0,0,116,117,5,61,0,0,117,118,5,
		47,0,0,118,122,5,3,0,0,119,121,3,12,6,0,120,119,1,0,0,0,121,124,1,0,0,
		0,122,120,1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,
		126,5,4,0,0,126,11,1,0,0,0,127,130,5,61,0,0,128,131,3,42,21,0,129,131,
		5,61,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,13,1,0,0,0,132,133,5,46,0,
		0,133,134,5,1,0,0,134,135,5,61,0,0,135,136,5,61,0,0,136,137,5,2,0,0,137,
		138,5,61,0,0,138,140,5,1,0,0,139,141,3,8,4,0,140,139,1,0,0,0,140,141,1,
		0,0,0,141,142,1,0,0,0,142,144,5,2,0,0,143,145,3,42,21,0,144,143,1,0,0,
		0,144,145,1,0,0,0,145,146,1,0,0,0,146,150,5,3,0,0,147,149,3,2,1,0,148,
		147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,
		0,0,0,152,150,1,0,0,0,153,154,5,4,0,0,154,15,1,0,0,0,155,156,5,34,0,0,
		156,157,5,61,0,0,157,158,3,18,9,0,158,159,3,42,21,0,159,174,1,0,0,0,160,
		161,5,61,0,0,161,162,5,35,0,0,162,163,3,18,9,0,163,164,3,42,21,0,164,168,
		5,3,0,0,165,167,3,20,10,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,
		0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,172,5,4,0,0,172,
		174,1,0,0,0,173,155,1,0,0,0,173,160,1,0,0,0,174,17,1,0,0,0,175,176,5,5,
		0,0,176,182,5,6,0,0,177,178,5,5,0,0,178,179,5,6,0,0,179,180,5,5,0,0,180,
		182,5,6,0,0,181,175,1,0,0,0,181,177,1,0,0,0,182,19,1,0,0,0,183,194,3,36,
		18,0,184,188,5,3,0,0,185,187,3,36,18,0,186,185,1,0,0,0,187,190,1,0,0,0,
		188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,192,
		5,4,0,0,192,194,5,10,0,0,193,183,1,0,0,0,193,184,1,0,0,0,194,21,1,0,0,
		0,195,197,3,32,16,0,196,198,5,7,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,
		290,1,0,0,0,199,200,5,33,0,0,200,201,5,8,0,0,201,202,5,32,0,0,202,204,
		5,1,0,0,203,205,3,24,12,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,
		0,0,206,208,5,2,0,0,207,209,5,7,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,
		290,1,0,0,0,210,214,5,3,0,0,211,213,3,2,1,0,212,211,1,0,0,0,213,216,1,
		0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,
		217,290,5,4,0,0,218,220,5,36,0,0,219,221,5,1,0,0,220,219,1,0,0,0,220,221,
		1,0,0,0,221,222,1,0,0,0,222,224,3,32,16,0,223,225,5,2,0,0,224,223,1,0,
		0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,229,3,22,11,0,227,228,5,37,0,0,
		228,230,3,22,11,0,229,227,1,0,0,0,229,230,1,0,0,0,230,290,1,0,0,0,231,
		232,5,38,0,0,232,233,3,32,16,0,233,235,5,3,0,0,234,236,3,30,15,0,235,234,
		1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,
		0,239,240,5,4,0,0,240,290,1,0,0,0,241,243,5,41,0,0,242,244,5,1,0,0,243,
		242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,247,3,32,16,0,246,248,
		5,2,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,3,22,11,
		0,250,290,1,0,0,0,251,253,5,41,0,0,252,254,5,1,0,0,253,252,1,0,0,0,253,
		254,1,0,0,0,254,255,1,0,0,0,255,256,3,26,13,0,256,257,3,32,16,0,257,258,
		5,7,0,0,258,260,3,32,16,0,259,261,5,2,0,0,260,259,1,0,0,0,260,261,1,0,
		0,0,261,262,1,0,0,0,262,263,3,22,11,0,263,290,1,0,0,0,264,266,5,41,0,0,
		265,267,5,1,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,270,
		3,28,14,0,269,271,5,2,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,
		0,0,272,273,3,22,11,0,273,290,1,0,0,0,274,276,5,43,0,0,275,277,5,7,0,0,
		276,275,1,0,0,0,276,277,1,0,0,0,277,290,1,0,0,0,278,280,5,44,0,0,279,281,
		5,7,0,0,280,279,1,0,0,0,280,281,1,0,0,0,281,290,1,0,0,0,282,284,5,45,0,
		0,283,285,3,32,16,0,284,283,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,
		288,5,7,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,195,1,
		0,0,0,289,199,1,0,0,0,289,210,1,0,0,0,289,218,1,0,0,0,289,231,1,0,0,0,
		289,241,1,0,0,0,289,251,1,0,0,0,289,264,1,0,0,0,289,274,1,0,0,0,289,278,
		1,0,0,0,289,282,1,0,0,0,290,23,1,0,0,0,291,296,3,32,16,0,292,293,5,10,
		0,0,293,295,3,32,16,0,294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,
		296,297,1,0,0,0,297,25,1,0,0,0,298,296,1,0,0,0,299,304,3,4,2,0,300,301,
		3,32,16,0,301,302,5,7,0,0,302,304,1,0,0,0,303,299,1,0,0,0,303,300,1,0,
		0,0,304,27,1,0,0,0,305,306,5,61,0,0,306,307,5,10,0,0,307,308,5,61,0,0,
		308,309,5,35,0,0,309,310,5,42,0,0,310,311,3,32,16,0,311,29,1,0,0,0,312,
		313,5,39,0,0,313,314,3,32,16,0,314,318,5,9,0,0,315,317,3,2,1,0,316,315,
		1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,330,1,0,0,
		0,320,318,1,0,0,0,321,322,5,40,0,0,322,326,5,9,0,0,323,325,3,2,1,0,324,
		323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,330,1,
		0,0,0,328,326,1,0,0,0,329,312,1,0,0,0,329,321,1,0,0,0,330,31,1,0,0,0,331,
		332,6,16,-1,0,332,333,7,0,0,0,333,372,3,32,16,21,334,335,5,61,0,0,335,
		372,7,1,0,0,336,337,5,61,0,0,337,338,5,35,0,0,338,339,5,61,0,0,339,340,
		5,3,0,0,340,341,3,38,19,0,341,342,5,4,0,0,342,372,1,0,0,0,343,372,5,50,
		0,0,344,372,5,51,0,0,345,372,5,52,0,0,346,372,5,53,0,0,347,372,5,54,0,
		0,348,372,5,60,0,0,349,350,5,61,0,0,350,351,5,21,0,0,351,352,3,18,9,0,
		352,353,3,42,21,0,353,355,5,3,0,0,354,356,3,36,18,0,355,354,1,0,0,0,355,
		356,1,0,0,0,356,357,1,0,0,0,357,358,5,3,0,0,358,372,1,0,0,0,359,360,5,
		49,0,0,360,361,5,61,0,0,361,363,5,1,0,0,362,364,3,36,18,0,363,362,1,0,
		0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,372,5,2,0,0,366,372,5,61,0,0,367,
		368,5,1,0,0,368,369,3,32,16,0,369,370,5,2,0,0,370,372,1,0,0,0,371,331,
		1,0,0,0,371,334,1,0,0,0,371,336,1,0,0,0,371,343,1,0,0,0,371,344,1,0,0,
		0,371,345,1,0,0,0,371,346,1,0,0,0,371,347,1,0,0,0,371,348,1,0,0,0,371,
		349,1,0,0,0,371,359,1,0,0,0,371,366,1,0,0,0,371,367,1,0,0,0,372,402,1,
		0,0,0,373,374,10,19,0,0,374,375,7,2,0,0,375,401,3,32,16,20,376,377,10,
		18,0,0,377,378,7,3,0,0,378,401,3,32,16,19,379,380,10,17,0,0,380,381,7,
		4,0,0,381,401,3,32,16,18,382,383,10,16,0,0,383,384,7,5,0,0,384,401,3,32,
		16,17,385,386,10,15,0,0,386,387,5,29,0,0,387,401,3,32,16,16,388,389,10,
		14,0,0,389,390,5,28,0,0,390,401,3,32,16,15,391,392,10,13,0,0,392,393,7,
		6,0,0,393,401,3,32,16,14,394,396,10,20,0,0,395,397,3,34,17,0,396,395,1,
		0,0,0,397,398,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,
		400,373,1,0,0,0,400,376,1,0,0,0,400,379,1,0,0,0,400,382,1,0,0,0,400,385,
		1,0,0,0,400,388,1,0,0,0,400,391,1,0,0,0,400,394,1,0,0,0,401,404,1,0,0,
		0,402,400,1,0,0,0,402,403,1,0,0,0,403,33,1,0,0,0,404,402,1,0,0,0,405,407,
		5,1,0,0,406,408,3,36,18,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,
		0,0,409,417,5,2,0,0,410,411,5,8,0,0,411,417,5,61,0,0,412,413,5,5,0,0,413,
		414,3,32,16,0,414,415,5,6,0,0,415,417,1,0,0,0,416,405,1,0,0,0,416,410,
		1,0,0,0,416,412,1,0,0,0,417,35,1,0,0,0,418,423,3,32,16,0,419,420,5,10,
		0,0,420,422,3,32,16,0,421,419,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,
		423,424,1,0,0,0,424,37,1,0,0,0,425,423,1,0,0,0,426,427,3,40,20,0,427,433,
		5,10,0,0,428,429,3,40,20,0,429,430,5,10,0,0,430,432,1,0,0,0,431,428,1,
		0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,39,1,0,0,0,435,
		433,1,0,0,0,436,437,5,61,0,0,437,438,5,9,0,0,438,447,3,32,16,0,439,440,
		5,61,0,0,440,441,5,9,0,0,441,442,5,61,0,0,442,443,5,3,0,0,443,444,3,38,
		19,0,444,445,5,4,0,0,445,447,1,0,0,0,446,436,1,0,0,0,446,439,1,0,0,0,447,
		41,1,0,0,0,448,449,7,7,0,0,449,43,1,0,0,0,56,47,56,62,70,76,82,84,90,94,
		100,112,122,130,140,144,150,168,173,181,188,193,197,204,208,214,220,224,
		229,237,243,247,253,260,266,270,276,280,284,287,289,296,303,318,326,329,
		355,363,371,398,400,402,407,416,423,433,446
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
