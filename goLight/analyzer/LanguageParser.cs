//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./LanguageParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACE=3, RBRACE=4, LBRACKET=5, RBRACKET=6, SEMICOLON=7, 
		DOT=8, COLON=9, COMMA=10, MAS=11, MENOS=12, MULTI=13, POTENCIA=14, DIV=15, 
		MODULO=16, ASIGSUM=17, ASIGMIN=18, INCREMENTO=19, DECREMENTO=20, IGUAL=21, 
		EQUALS=22, DIFF=23, MENOR=24, MENIGUAL=25, MAYOR=26, MAYIGUAL=27, OR=28, 
		AND=29, NOT=30, PRINT=31, FMT=32, VAR=33, DCLIMPL=34, IF=35, ELSE=36, 
		SWITCH=37, CASE=38, DEFAUL=39, FOR=40, STBREAK=41, STCONTINUE=42, STRETURN=43, 
		STFUNC=44, STRUCT=45, STTYPE=46, NUEVO=47, INT=48, FLOAT=49, STRING=50, 
		BOOL=51, RUNE=52, T_INT=53, T_FLOAT=54, T_STR=55, T_BOOL=56, T_RUNE=57, 
		ID=58, WS=59, COMENT=60, MCOMENT=61;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_varDcl = 2, RULE_funcionDcl = 3, 
		RULE_parametrosF = 4, RULE_structDcl = 5, RULE_atriBody = 6, RULE_statement = 7, 
		RULE_forInit = 8, RULE_caseStmt = 9, RULE_expr = 10, RULE_call = 11, RULE_parametros = 12, 
		RULE_initAttrList = 13, RULE_initAttr = 14, RULE_tiposD = 15;
	public static readonly string[] ruleNames = {
		"program", "dcl", "varDcl", "funcionDcl", "parametrosF", "structDcl", 
		"atriBody", "statement", "forInit", "caseStmt", "expr", "call", "parametros", 
		"initAttrList", "initAttr", "tiposD"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "':'", "','", 
		"'+'", "'-'", "'*'", "'^'", "'/'", "'%'", "'+='", "'-='", "'++'", "'--'", 
		"'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", "'!'", 
		"'Println'", "'fmt'", "'var'", "':='", "'if'", "'else'", "'switch'", "'case'", 
		"'default'", "'for'", "'break'", "'continue'", "'return'", "'func'", "'struct'", 
		"'type'", "'new'", null, null, null, null, null, "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
		"SEMICOLON", "DOT", "COLON", "COMMA", "MAS", "MENOS", "MULTI", "POTENCIA", 
		"DIV", "MODULO", "ASIGSUM", "ASIGMIN", "INCREMENTO", "DECREMENTO", "IGUAL", 
		"EQUALS", "DIFF", "MENOR", "MENIGUAL", "MAYOR", "MAYIGUAL", "OR", "AND", 
		"NOT", "PRINT", "FMT", "VAR", "DCLIMPL", "IF", "ELSE", "SWITCH", "CASE", 
		"DEFAUL", "FOR", "STBREAK", "STCONTINUE", "STRETURN", "STFUNC", "STRUCT", 
		"STTYPE", "NUEVO", "INT", "FLOAT", "STRING", "BOOL", "RUNE", "T_INT", 
		"T_FLOAT", "T_STR", "T_BOOL", "T_RUNE", "ID", "WS", "COMENT", "MCOMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297201477280075786L) != 0)) {
				{
				{
				State = 32;
				dcl();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionDclContext funcionDcl() {
			return GetRuleContext<FuncionDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDclContext structDcl() {
			return GetRuleContext<StructDclContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				funcionDcl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				structDcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
	 
		public VarDclContext() { }
		public virtual void CopyFrom(VarDclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDclStructContext : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDclStructContext(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDclStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDclStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDclStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDcl2Context : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDcl2Context(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDcl2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDcl2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDcl3Context : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCLIMPL() { return GetToken(LanguageParser.DCLIMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDcl3Context(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDcl3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDcl3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDcl1Context : VarDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public VarDcl1Context(VarDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterVarDcl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitVarDcl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDcl);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new VarDclStructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				Match(VAR);
				State = 45;
				Match(ID);
				State = 46;
				Match(ID);
				State = 47;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new VarDcl1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(VAR);
				State = 49;
				Match(ID);
				State = 50;
				tiposD();
				State = 51;
				Match(IGUAL);
				State = 52;
				expr(0);
				State = 53;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new VarDcl2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 55;
				Match(VAR);
				State = 56;
				Match(ID);
				State = 57;
				tiposD();
				State = 58;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new VarDcl3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				Match(ID);
				State = 61;
				Match(DCLIMPL);
				State = 62;
				expr(0);
				State = 63;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STFUNC() { return GetToken(LanguageParser.STFUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosFContext parametrosF() {
			return GetRuleContext<ParametrosFContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public FuncionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcionDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFuncionDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFuncionDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionDclContext funcionDcl() {
		FuncionDclContext _localctx = new FuncionDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(STFUNC);
			State = 68;
			Match(ID);
			State = 69;
			Match(LPAREN);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 70;
				parametrosF();
				}
			}

			State = 73;
			Match(RPAREN);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 279223176896970752L) != 0)) {
				{
				State = 74;
				tiposD();
				}
			}

			State = 77;
			Match(LBRACE);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297201477280075786L) != 0)) {
				{
				{
				State = 78;
				dcl();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosFContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext[] tiposD() {
			return GetRuleContexts<TiposDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD(int i) {
			return GetRuleContext<TiposDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ParametrosFContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametrosF; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterParametrosF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitParametrosF(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametrosF(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosFContext parametrosF() {
		ParametrosFContext _localctx = new ParametrosFContext(Context, State);
		EnterRule(_localctx, 8, RULE_parametrosF);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(ID);
			State = 87;
			tiposD();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 88;
				Match(COMMA);
				State = 89;
				Match(ID);
				State = 90;
				tiposD();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STTYPE() { return GetToken(LanguageParser.STTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(LanguageParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtriBodyContext[] atriBody() {
			return GetRuleContexts<AtriBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtriBodyContext atriBody(int i) {
			return GetRuleContext<AtriBodyContext>(i);
		}
		public StructDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitStructDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDclContext structDcl() {
		StructDclContext _localctx = new StructDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_structDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(STTYPE);
			State = 97;
			Match(ID);
			State = 98;
			Match(STRUCT);
			State = 99;
			Match(LBRACE);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 100;
				atriBody();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 106;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtriBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposDContext tiposD() {
			return GetRuleContext<TiposDContext>(0);
		}
		public AtriBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atriBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAtriBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAtriBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtriBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtriBodyContext atriBody() {
		AtriBodyContext _localctx = new AtriBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_atriBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(ID);
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_INT:
			case T_FLOAT:
			case T_STR:
			case T_BOOL:
			case T_RUNE:
				{
				State = 109;
				tiposD();
				}
				break;
			case ID:
				{
				State = 110;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ST_continueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STCONTINUE() { return GetToken(LanguageParser.STCONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ST_continueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterST_continue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitST_continue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitST_continue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LanguageParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(LanguageParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext[] caseStmt() {
			return GetRuleContexts<CaseStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStmtContext caseStmt(int i) {
			return GetRuleContext<CaseStmtContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ST_breakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STBREAK() { return GetToken(LanguageParser.STBREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ST_breakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterST_break(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitST_break(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitST_break(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(LanguageParser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(LanguageParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public PrintStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ExprStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BloqueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BloqueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LanguageParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ST_returnContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRETURN() { return GetToken(LanguageParser.STRETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ST_returnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterST_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitST_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitST_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				expr(0);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 114;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 2:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(FMT);
				State = 118;
				Match(DOT);
				State = 119;
				Match(PRINT);
				State = 120;
				Match(LPAREN);
				State = 121;
				expr(0);
				State = 122;
				Match(RPAREN);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 123;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 3:
				_localctx = new BloqueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 126;
				Match(LBRACE);
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297201477280075786L) != 0)) {
					{
					{
					State = 127;
					dcl();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				Match(RBRACE);
				}
				break;
			case 4:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				Match(IF);
				State = 136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 135;
					Match(LPAREN);
					}
					break;
				}
				State = 138;
				expr(0);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 139;
					Match(RPAREN);
					}
				}

				State = 142;
				statement();
				State = 145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 143;
					Match(ELSE);
					State = 144;
					statement();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 147;
				Match(SWITCH);
				State = 148;
				expr(0);
				State = 149;
				Match(LBRACE);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 150;
					caseStmt();
					}
					}
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CASE || _la==DEFAUL );
				State = 155;
				Match(RBRACE);
				}
				break;
			case 6:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 157;
				Match(FOR);
				State = 159;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 158;
					Match(LPAREN);
					}
					break;
				}
				State = 161;
				expr(0);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 162;
					Match(RPAREN);
					}
				}

				State = 165;
				statement();
				}
				break;
			case 7:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 167;
				Match(FOR);
				State = 169;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 168;
					Match(LPAREN);
					}
					break;
				}
				State = 171;
				forInit();
				State = 172;
				expr(0);
				State = 173;
				Match(SEMICOLON);
				State = 174;
				expr(0);
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RPAREN) {
					{
					State = 175;
					Match(RPAREN);
					}
				}

				State = 178;
				statement();
				}
				break;
			case 8:
				_localctx = new ST_breakContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 180;
				Match(STBREAK);
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 181;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 9:
				_localctx = new ST_continueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				Match(STCONTINUE);
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 185;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case 10:
				_localctx = new ST_returnContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 188;
				Match(STRETURN);
				State = 190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 189;
					expr(0);
					}
					break;
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 192;
					Match(SEMICOLON);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(LanguageParser.SEMICOLON, 0); }
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 16, RULE_forInit);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				expr(0);
				State = 199;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStmtContext : ParserRuleContext {
		public CaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStmt; } }
	 
		public CaseStmtContext() { }
		public virtual void CopyFrom(CaseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseDefaultContext : CaseStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAUL() { return GetToken(LanguageParser.DEFAUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public CaseDefaultContext(CaseStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseNormalContext : CaseStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(LanguageParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public CaseNormalContext(CaseStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterCaseNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitCaseNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseNormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStmtContext caseStmt() {
		CaseStmtContext _localctx = new CaseStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_caseStmt);
		int _la;
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				_localctx = new CaseNormalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				Match(CASE);
				State = 204;
				expr(0);
				State = 205;
				Match(COLON);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297201477280075786L) != 0)) {
					{
					{
					State = 206;
					dcl();
					}
					}
					State = 211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DEFAUL:
				_localctx = new CaseDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(DEFAUL);
				State = 213;
				Match(COLON);
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297201477280075786L) != 0)) {
					{
					{
					State = 214;
					dcl();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LanguageParser.OR, 0); }
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI() { return GetToken(LanguageParser.MULTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(LanguageParser.MODULO, 0); }
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAS() { return GetToken(LanguageParser.MAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(LanguageParser.MENOS, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVarContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(LanguageParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGSUM() { return GetToken(LanguageParser.ASIGSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGMIN() { return GetToken(LanguageParser.ASIGMIN, 0); }
		public AssignVarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAssignVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAssignVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateUContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOS() { return GetToken(LanguageParser.MENOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		public NegateUContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterNegateU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitNegateU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateU(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewStructInitContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCLIMPL() { return GetToken(LanguageParser.DCLIMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrListContext initAttrList() {
			return GetRuleContext<InitAttrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		public NewStructInitContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterNewStructInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitNewStructInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewStructInit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelacionalesContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR() { return GetToken(LanguageParser.MAYOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYIGUAL() { return GetToken(LanguageParser.MAYIGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR() { return GetToken(LanguageParser.MENOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENIGUAL() { return GetToken(LanguageParser.MENIGUAL, 0); }
		public RelacionalesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterRelacionales(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitRelacionales(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacionales(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LanguageParser.AND, 0); }
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewInstanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUEVO() { return GetToken(LanguageParser.NUEVO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public NewInstanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterNewInstan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitNewInstan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LlamadaContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public LlamadaContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterLlamada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitLlamada(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlamada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateVarContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTO() { return GetToken(LanguageParser.INCREMENTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENTO() { return GetToken(LanguageParser.DECREMENTO, 0); }
		public UpdateVarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterUpdateVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitUpdateVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitRune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparationContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LanguageParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFF() { return GetToken(LanguageParser.DIFF, 0); }
		public ComparationContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterComparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitComparation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				_localctx = new NegateUContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 223;
				((NegateUContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MENOS || _la==NOT) ) {
					((NegateUContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 224;
				expr(19);
				}
				break;
			case 2:
				{
				_localctx = new UpdateVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				Match(ID);
				State = 226;
				((UpdateVarContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENTO || _la==DECREMENTO) ) {
					((UpdateVarContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new NewStructInitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				Match(ID);
				State = 228;
				Match(DCLIMPL);
				State = 229;
				Match(ID);
				State = 230;
				Match(LBRACE);
				State = 231;
				initAttrList();
				State = 232;
				Match(RBRACE);
				}
				break;
			case 4:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 234;
				Match(INT);
				}
				break;
			case 5:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				Match(FLOAT);
				}
				break;
			case 6:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(STRING);
				}
				break;
			case 7:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 237;
				Match(BOOL);
				}
				break;
			case 8:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				Match(RUNE);
				}
				break;
			case 9:
				{
				_localctx = new NewInstanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 239;
				Match(NUEVO);
				State = 240;
				Match(ID);
				State = 241;
				Match(LPAREN);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297096838991843330L) != 0)) {
					{
					State = 242;
					parametros();
					}
				}

				State = 245;
				Match(RPAREN);
				}
				break;
			case 10:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(ID);
				}
				break;
			case 11:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				Match(LPAREN);
				State = 248;
				expr(0);
				State = 249;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 280;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 253;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 254;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 106496L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 255;
						expr(18);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 256;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 257;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MAS || _la==MENOS) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 258;
						expr(17);
						}
						break;
					case 3:
						{
						_localctx = new RelacionalesContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 259;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 260;
						((RelacionalesContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
							((RelacionalesContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 261;
						expr(16);
						}
						break;
					case 4:
						{
						_localctx = new ComparationContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 262;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 263;
						((ComparationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUALS || _la==DIFF) ) {
							((ComparationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 264;
						expr(15);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 265;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 266;
						Match(AND);
						State = 267;
						expr(14);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 268;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 269;
						Match(OR);
						State = 270;
						expr(13);
						}
						break;
					case 7:
						{
						_localctx = new AssignVarContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 271;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 272;
						((AssignVarContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2490368L) != 0)) ) {
							((AssignVarContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 273;
						expr(12);
						}
						break;
					case 8:
						{
						_localctx = new LlamadaContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 274;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 276;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 275;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 278;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCallContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		public FuncCallContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetAtrContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public GetAtrContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterGetAtr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitGetAtr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetAtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 22, RULE_call);
		int _la;
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new FuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				Match(LPAREN);
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 297096838991843330L) != 0)) {
					{
					State = 286;
					parametros();
					}
				}

				State = 289;
				Match(RPAREN);
				}
				break;
			case DOT:
				_localctx = new GetAtrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				Match(DOT);
				State = 291;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 24, RULE_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			expr(0);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 295;
				Match(COMMA);
				State = 296;
				expr(0);
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAttrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrContext[] initAttr() {
			return GetRuleContexts<InitAttrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrContext initAttr(int i) {
			return GetRuleContext<InitAttrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public InitAttrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAttrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInitAttrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInitAttrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAttrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAttrListContext initAttrList() {
		InitAttrListContext _localctx = new InitAttrListContext(Context, State);
		EnterRule(_localctx, 26, RULE_initAttrList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			initAttr();
			State = 303;
			Match(COMMA);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 304;
				initAttr();
				State = 305;
				Match(COMMA);
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAttrContext : ParserRuleContext {
		public InitAttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAttr; } }
	 
		public InitAttrContext() { }
		public virtual void CopyFrom(InitAttrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitAttrExprContext : InitAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InitAttrExprContext(InitAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInitAttrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInitAttrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAttrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitAttrStructContext : InitAttrContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitAttrListContext initAttrList() {
			return GetRuleContext<InitAttrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		public InitAttrStructContext(InitAttrContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterInitAttrStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitInitAttrStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAttrStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAttrContext initAttr() {
		InitAttrContext _localctx = new InitAttrContext(Context, State);
		EnterRule(_localctx, 28, RULE_initAttr);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new InitAttrExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				Match(ID);
				State = 313;
				Match(COLON);
				State = 314;
				expr(0);
				}
				break;
			case 2:
				_localctx = new InitAttrStructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(ID);
				State = 316;
				Match(COLON);
				State = 317;
				Match(ID);
				State = 318;
				Match(LBRACE);
				State = 319;
				initAttrList();
				State = 320;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiposDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_INT() { return GetToken(LanguageParser.T_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FLOAT() { return GetToken(LanguageParser.T_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_STR() { return GetToken(LanguageParser.T_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BOOL() { return GetToken(LanguageParser.T_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_RUNE() { return GetToken(LanguageParser.T_RUNE, 0); }
		public TiposDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tiposD; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.EnterTiposD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageParserListener typedListener = listener as ILanguageParserListener;
			if (typedListener != null) typedListener.ExitTiposD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageParserVisitor<TResult> typedVisitor = visitor as ILanguageParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiposD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiposDContext tiposD() {
		TiposDContext _localctx = new TiposDContext(Context, State);
		EnterRule(_localctx, 30, RULE_tiposD);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 279223176896970752L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 18);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,61,327,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,1,1,1,1,1,1,1,3,1,43,8,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,66,8,2,1,3,1,3,1,3,1,3,3,3,72,8,3,1,3,1,3,3,3,76,8,3,1,
		3,1,3,5,3,80,8,3,10,3,12,3,83,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,92,8,
		4,10,4,12,4,95,9,4,1,5,1,5,1,5,1,5,1,5,5,5,102,8,5,10,5,12,5,105,9,5,1,
		5,1,5,1,6,1,6,1,6,3,6,112,8,6,1,7,1,7,3,7,116,8,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,3,7,125,8,7,1,7,1,7,5,7,129,8,7,10,7,12,7,132,9,7,1,7,1,7,1,7,
		3,7,137,8,7,1,7,1,7,3,7,141,8,7,1,7,1,7,1,7,3,7,146,8,7,1,7,1,7,1,7,1,
		7,4,7,152,8,7,11,7,12,7,153,1,7,1,7,1,7,1,7,3,7,160,8,7,1,7,1,7,3,7,164,
		8,7,1,7,1,7,1,7,1,7,3,7,170,8,7,1,7,1,7,1,7,1,7,1,7,3,7,177,8,7,1,7,1,
		7,1,7,1,7,3,7,183,8,7,1,7,1,7,3,7,187,8,7,1,7,1,7,3,7,191,8,7,1,7,3,7,
		194,8,7,3,7,196,8,7,1,8,1,8,1,8,1,8,3,8,202,8,8,1,9,1,9,1,9,1,9,5,9,208,
		8,9,10,9,12,9,211,9,9,1,9,1,9,1,9,5,9,216,8,9,10,9,12,9,219,9,9,3,9,221,
		8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,244,8,10,1,10,1,10,1,10,1,10,
		1,10,1,10,3,10,252,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,
		10,277,8,10,11,10,12,10,278,5,10,281,8,10,10,10,12,10,284,9,10,1,11,1,
		11,3,11,288,8,11,1,11,1,11,1,11,3,11,293,8,11,1,12,1,12,1,12,5,12,298,
		8,12,10,12,12,12,301,9,12,1,13,1,13,1,13,1,13,1,13,5,13,308,8,13,10,13,
		12,13,311,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
		323,8,14,1,15,1,15,1,15,0,1,20,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,0,8,2,0,12,12,30,30,1,0,19,20,2,0,13,13,15,16,1,0,11,12,1,0,24,27,
		1,0,22,23,2,0,17,18,21,21,1,0,53,57,376,0,35,1,0,0,0,2,42,1,0,0,0,4,65,
		1,0,0,0,6,67,1,0,0,0,8,86,1,0,0,0,10,96,1,0,0,0,12,108,1,0,0,0,14,195,
		1,0,0,0,16,201,1,0,0,0,18,220,1,0,0,0,20,251,1,0,0,0,22,292,1,0,0,0,24,
		294,1,0,0,0,26,302,1,0,0,0,28,322,1,0,0,0,30,324,1,0,0,0,32,34,3,2,1,0,
		33,32,1,0,0,0,34,37,1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,1,1,0,0,0,37,
		35,1,0,0,0,38,43,3,4,2,0,39,43,3,6,3,0,40,43,3,14,7,0,41,43,3,10,5,0,42,
		38,1,0,0,0,42,39,1,0,0,0,42,40,1,0,0,0,42,41,1,0,0,0,43,3,1,0,0,0,44,45,
		5,33,0,0,45,46,5,58,0,0,46,47,5,58,0,0,47,66,5,7,0,0,48,49,5,33,0,0,49,
		50,5,58,0,0,50,51,3,30,15,0,51,52,5,21,0,0,52,53,3,20,10,0,53,54,5,7,0,
		0,54,66,1,0,0,0,55,56,5,33,0,0,56,57,5,58,0,0,57,58,3,30,15,0,58,59,5,
		7,0,0,59,66,1,0,0,0,60,61,5,58,0,0,61,62,5,34,0,0,62,63,3,20,10,0,63,64,
		5,7,0,0,64,66,1,0,0,0,65,44,1,0,0,0,65,48,1,0,0,0,65,55,1,0,0,0,65,60,
		1,0,0,0,66,5,1,0,0,0,67,68,5,44,0,0,68,69,5,58,0,0,69,71,5,1,0,0,70,72,
		3,8,4,0,71,70,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,75,5,2,0,0,74,76,
		3,30,15,0,75,74,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,81,5,3,0,0,78,80,
		3,2,1,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,
		1,0,0,0,83,81,1,0,0,0,84,85,5,4,0,0,85,7,1,0,0,0,86,87,5,58,0,0,87,93,
		3,30,15,0,88,89,5,10,0,0,89,90,5,58,0,0,90,92,3,30,15,0,91,88,1,0,0,0,
		92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,9,1,0,0,0,95,93,1,0,0,0,96,
		97,5,46,0,0,97,98,5,58,0,0,98,99,5,45,0,0,99,103,5,3,0,0,100,102,3,12,
		6,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,
		106,1,0,0,0,105,103,1,0,0,0,106,107,5,4,0,0,107,11,1,0,0,0,108,111,5,58,
		0,0,109,112,3,30,15,0,110,112,5,58,0,0,111,109,1,0,0,0,111,110,1,0,0,0,
		112,13,1,0,0,0,113,115,3,20,10,0,114,116,5,7,0,0,115,114,1,0,0,0,115,116,
		1,0,0,0,116,196,1,0,0,0,117,118,5,32,0,0,118,119,5,8,0,0,119,120,5,31,
		0,0,120,121,5,1,0,0,121,122,3,20,10,0,122,124,5,2,0,0,123,125,5,7,0,0,
		124,123,1,0,0,0,124,125,1,0,0,0,125,196,1,0,0,0,126,130,5,3,0,0,127,129,
		3,2,1,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,
		0,131,133,1,0,0,0,132,130,1,0,0,0,133,196,5,4,0,0,134,136,5,35,0,0,135,
		137,5,1,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,140,3,
		20,10,0,139,141,5,2,0,0,140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,
		0,142,145,3,14,7,0,143,144,5,36,0,0,144,146,3,14,7,0,145,143,1,0,0,0,145,
		146,1,0,0,0,146,196,1,0,0,0,147,148,5,37,0,0,148,149,3,20,10,0,149,151,
		5,3,0,0,150,152,3,18,9,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,
		0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,5,4,0,0,156,196,1,0,0,0,157,
		159,5,40,0,0,158,160,5,1,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,
		0,0,0,161,163,3,20,10,0,162,164,5,2,0,0,163,162,1,0,0,0,163,164,1,0,0,
		0,164,165,1,0,0,0,165,166,3,14,7,0,166,196,1,0,0,0,167,169,5,40,0,0,168,
		170,5,1,0,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,3,
		16,8,0,172,173,3,20,10,0,173,174,5,7,0,0,174,176,3,20,10,0,175,177,5,2,
		0,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,3,14,7,0,179,
		196,1,0,0,0,180,182,5,41,0,0,181,183,5,7,0,0,182,181,1,0,0,0,182,183,1,
		0,0,0,183,196,1,0,0,0,184,186,5,42,0,0,185,187,5,7,0,0,186,185,1,0,0,0,
		186,187,1,0,0,0,187,196,1,0,0,0,188,190,5,43,0,0,189,191,3,20,10,0,190,
		189,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,194,5,7,0,0,193,192,1,
		0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,113,1,0,0,0,195,117,1,0,0,0,
		195,126,1,0,0,0,195,134,1,0,0,0,195,147,1,0,0,0,195,157,1,0,0,0,195,167,
		1,0,0,0,195,180,1,0,0,0,195,184,1,0,0,0,195,188,1,0,0,0,196,15,1,0,0,0,
		197,202,3,4,2,0,198,199,3,20,10,0,199,200,5,7,0,0,200,202,1,0,0,0,201,
		197,1,0,0,0,201,198,1,0,0,0,202,17,1,0,0,0,203,204,5,38,0,0,204,205,3,
		20,10,0,205,209,5,9,0,0,206,208,3,2,1,0,207,206,1,0,0,0,208,211,1,0,0,
		0,209,207,1,0,0,0,209,210,1,0,0,0,210,221,1,0,0,0,211,209,1,0,0,0,212,
		213,5,39,0,0,213,217,5,9,0,0,214,216,3,2,1,0,215,214,1,0,0,0,216,219,1,
		0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,
		220,203,1,0,0,0,220,212,1,0,0,0,221,19,1,0,0,0,222,223,6,10,-1,0,223,224,
		7,0,0,0,224,252,3,20,10,19,225,226,5,58,0,0,226,252,7,1,0,0,227,228,5,
		58,0,0,228,229,5,34,0,0,229,230,5,58,0,0,230,231,5,3,0,0,231,232,3,26,
		13,0,232,233,5,4,0,0,233,252,1,0,0,0,234,252,5,48,0,0,235,252,5,49,0,0,
		236,252,5,50,0,0,237,252,5,51,0,0,238,252,5,52,0,0,239,240,5,47,0,0,240,
		241,5,58,0,0,241,243,5,1,0,0,242,244,3,24,12,0,243,242,1,0,0,0,243,244,
		1,0,0,0,244,245,1,0,0,0,245,252,5,2,0,0,246,252,5,58,0,0,247,248,5,1,0,
		0,248,249,3,20,10,0,249,250,5,2,0,0,250,252,1,0,0,0,251,222,1,0,0,0,251,
		225,1,0,0,0,251,227,1,0,0,0,251,234,1,0,0,0,251,235,1,0,0,0,251,236,1,
		0,0,0,251,237,1,0,0,0,251,238,1,0,0,0,251,239,1,0,0,0,251,246,1,0,0,0,
		251,247,1,0,0,0,252,282,1,0,0,0,253,254,10,17,0,0,254,255,7,2,0,0,255,
		281,3,20,10,18,256,257,10,16,0,0,257,258,7,3,0,0,258,281,3,20,10,17,259,
		260,10,15,0,0,260,261,7,4,0,0,261,281,3,20,10,16,262,263,10,14,0,0,263,
		264,7,5,0,0,264,281,3,20,10,15,265,266,10,13,0,0,266,267,5,29,0,0,267,
		281,3,20,10,14,268,269,10,12,0,0,269,270,5,28,0,0,270,281,3,20,10,13,271,
		272,10,11,0,0,272,273,7,6,0,0,273,281,3,20,10,12,274,276,10,18,0,0,275,
		277,3,22,11,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,
		1,0,0,0,279,281,1,0,0,0,280,253,1,0,0,0,280,256,1,0,0,0,280,259,1,0,0,
		0,280,262,1,0,0,0,280,265,1,0,0,0,280,268,1,0,0,0,280,271,1,0,0,0,280,
		274,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,21,1,0,
		0,0,284,282,1,0,0,0,285,287,5,1,0,0,286,288,3,24,12,0,287,286,1,0,0,0,
		287,288,1,0,0,0,288,289,1,0,0,0,289,293,5,2,0,0,290,291,5,8,0,0,291,293,
		5,58,0,0,292,285,1,0,0,0,292,290,1,0,0,0,293,23,1,0,0,0,294,299,3,20,10,
		0,295,296,5,10,0,0,296,298,3,20,10,0,297,295,1,0,0,0,298,301,1,0,0,0,299,
		297,1,0,0,0,299,300,1,0,0,0,300,25,1,0,0,0,301,299,1,0,0,0,302,303,3,28,
		14,0,303,309,5,10,0,0,304,305,3,28,14,0,305,306,5,10,0,0,306,308,1,0,0,
		0,307,304,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,
		27,1,0,0,0,311,309,1,0,0,0,312,313,5,58,0,0,313,314,5,9,0,0,314,323,3,
		20,10,0,315,316,5,58,0,0,316,317,5,9,0,0,317,318,5,58,0,0,318,319,5,3,
		0,0,319,320,3,26,13,0,320,321,5,4,0,0,321,323,1,0,0,0,322,312,1,0,0,0,
		322,315,1,0,0,0,323,29,1,0,0,0,324,325,7,7,0,0,325,31,1,0,0,0,39,35,42,
		65,71,75,81,93,103,111,115,124,130,136,140,145,153,159,163,169,176,182,
		186,190,193,195,201,209,217,220,243,251,278,280,282,287,292,299,309,322
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
