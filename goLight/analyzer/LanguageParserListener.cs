//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./LanguageParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.dcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDcl([NotNull] LanguageParser.DclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.dcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDcl([NotNull] LanguageParser.DclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varDclStruct</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDclStruct([NotNull] LanguageParser.VarDclStructContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varDclStruct</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDclStruct([NotNull] LanguageParser.VarDclStructContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varDcl1</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDcl1([NotNull] LanguageParser.VarDcl1Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varDcl1</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDcl1([NotNull] LanguageParser.VarDcl1Context context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varDcl2</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDcl2([NotNull] LanguageParser.VarDcl2Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varDcl2</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDcl2([NotNull] LanguageParser.VarDcl2Context context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varDcl3</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDcl3([NotNull] LanguageParser.VarDcl3Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varDcl3</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDcl3([NotNull] LanguageParser.VarDcl3Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcionDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncionDcl([NotNull] LanguageParser.FuncionDclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcionDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncionDcl([NotNull] LanguageParser.FuncionDclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.parametrosF"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParametrosF([NotNull] LanguageParser.ParametrosFContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.parametrosF"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParametrosF([NotNull] LanguageParser.ParametrosFContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructDcl([NotNull] LanguageParser.StructDclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructDcl([NotNull] LanguageParser.StructDclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.atriBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtriBody([NotNull] LanguageParser.AtriBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.atriBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtriBody([NotNull] LanguageParser.AtriBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprStmt([NotNull] LanguageParser.ExprStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprStmt([NotNull] LanguageParser.ExprStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStmt([NotNull] LanguageParser.PrintStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStmt([NotNull] LanguageParser.PrintStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Bloque</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBloque([NotNull] LanguageParser.BloqueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Bloque</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBloque([NotNull] LanguageParser.BloqueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] LanguageParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] LanguageParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] LanguageParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] LanguageParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ST_break</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterST_break([NotNull] LanguageParser.ST_breakContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ST_break</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitST_break([NotNull] LanguageParser.ST_breakContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ST_continue</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterST_continue([NotNull] LanguageParser.ST_continueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ST_continue</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitST_continue([NotNull] LanguageParser.ST_continueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ST_return</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterST_return([NotNull] LanguageParser.ST_returnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ST_return</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitST_return([NotNull] LanguageParser.ST_returnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInit([NotNull] LanguageParser.ForInitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInit([NotNull] LanguageParser.ForInitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>caseNormal</c>
	/// labeled alternative in <see cref="LanguageParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseNormal([NotNull] LanguageParser.CaseNormalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseNormal</c>
	/// labeled alternative in <see cref="LanguageParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseNormal([NotNull] LanguageParser.CaseNormalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>caseDefault</c>
	/// labeled alternative in <see cref="LanguageParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseDefault([NotNull] LanguageParser.CaseDefaultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>caseDefault</c>
	/// labeled alternative in <see cref="LanguageParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseDefault([NotNull] LanguageParser.CaseDefaultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr([NotNull] LanguageParser.OrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr([NotNull] LanguageParser.OrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDiv([NotNull] LanguageParser.MulDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDiv([NotNull] LanguageParser.MulDivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSub([NotNull] LanguageParser.AddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSub([NotNull] LanguageParser.AddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] LanguageParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] LanguageParser.ParensContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignVar</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignVar([NotNull] LanguageParser.AssignVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignVar</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignVar([NotNull] LanguageParser.AssignVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NegateU</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegateU([NotNull] LanguageParser.NegateUContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NegateU</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegateU([NotNull] LanguageParser.NegateUContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] LanguageParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] LanguageParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] LanguageParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] LanguageParser.IntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] LanguageParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] LanguageParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewStructInit</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewStructInit([NotNull] LanguageParser.NewStructInitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewStructInit</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewStructInit([NotNull] LanguageParser.NewStructInitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] LanguageParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] LanguageParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool([NotNull] LanguageParser.BoolContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool([NotNull] LanguageParser.BoolContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Relacionales</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelacionales([NotNull] LanguageParser.RelacionalesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Relacionales</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelacionales([NotNull] LanguageParser.RelacionalesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd([NotNull] LanguageParser.AndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd([NotNull] LanguageParser.AndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewInstan</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewInstan([NotNull] LanguageParser.NewInstanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewInstan</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewInstan([NotNull] LanguageParser.NewInstanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Llamada</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLlamada([NotNull] LanguageParser.LlamadaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Llamada</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLlamada([NotNull] LanguageParser.LlamadaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UpdateVar</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpdateVar([NotNull] LanguageParser.UpdateVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UpdateVar</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpdateVar([NotNull] LanguageParser.UpdateVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRune([NotNull] LanguageParser.RuneContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRune([NotNull] LanguageParser.RuneContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Comparation</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparation([NotNull] LanguageParser.ComparationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Comparation</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparation([NotNull] LanguageParser.ComparationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FuncCall</c>
	/// labeled alternative in <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] LanguageParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FuncCall</c>
	/// labeled alternative in <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] LanguageParser.FuncCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GetAtr</c>
	/// labeled alternative in <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetAtr([NotNull] LanguageParser.GetAtrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GetAtr</c>
	/// labeled alternative in <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetAtr([NotNull] LanguageParser.GetAtrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.parametros"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParametros([NotNull] LanguageParser.ParametrosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.parametros"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParametros([NotNull] LanguageParser.ParametrosContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.initAttrList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitAttrList([NotNull] LanguageParser.InitAttrListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.initAttrList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitAttrList([NotNull] LanguageParser.InitAttrListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InitAttrExpr</c>
	/// labeled alternative in <see cref="LanguageParser.initAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitAttrExpr([NotNull] LanguageParser.InitAttrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InitAttrExpr</c>
	/// labeled alternative in <see cref="LanguageParser.initAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitAttrExpr([NotNull] LanguageParser.InitAttrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InitAttrStruct</c>
	/// labeled alternative in <see cref="LanguageParser.initAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitAttrStruct([NotNull] LanguageParser.InitAttrStructContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InitAttrStruct</c>
	/// labeled alternative in <see cref="LanguageParser.initAttr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitAttrStruct([NotNull] LanguageParser.InitAttrStructContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.tiposD"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTiposD([NotNull] LanguageParser.TiposDContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.tiposD"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTiposD([NotNull] LanguageParser.TiposDContext context);
}
} // namespace analyzer
