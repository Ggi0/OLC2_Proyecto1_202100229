//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./LanguageLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACE=3, RBRACE=4, LBRACKET=5, RBRACKET=6, SEMICOLON=7, 
		DOT=8, COLON=9, COMMA=10, MAS=11, MENOS=12, MULTI=13, POTENCIA=14, DIV=15, 
		MODULO=16, ASIGSUM=17, ASIGMIN=18, IGUAL=19, EQUALS=20, DIFF=21, MENOR=22, 
		MENIGUAL=23, MAYOR=24, MAYIGUAL=25, OR=26, AND=27, NOT=28, PRINT=29, FMT=30, 
		VAR=31, DCLIMPL=32, INT=33, FLOAT=34, STRING=35, BOOL=36, RUNE=37, T_INT=38, 
		T_FLOAT=39, T_STR=40, T_BOOL=41, T_RUNE=42, ID=43, WS=44, COMENT=45, MCOMENT=46;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", 
		"DOT", "COLON", "COMMA", "MAS", "MENOS", "MULTI", "POTENCIA", "DIV", "MODULO", 
		"ASIGSUM", "ASIGMIN", "IGUAL", "EQUALS", "DIFF", "MENOR", "MENIGUAL", 
		"MAYOR", "MAYIGUAL", "OR", "AND", "NOT", "PRINT", "FMT", "VAR", "DCLIMPL", 
		"INT", "FLOAT", "STRING", "BOOL", "RUNE", "T_INT", "T_FLOAT", "T_STR", 
		"T_BOOL", "T_RUNE", "ID", "WS", "COMENT", "MCOMENT"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "':'", "','", 
		"'+'", "'-'", "'*'", "'^'", "'/'", "'%'", "'+='", "'-='", "'='", "'=='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", "'!'", "'Println'", 
		"'fmt'", "'var'", "':='", null, null, null, null, null, "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
		"SEMICOLON", "DOT", "COLON", "COMMA", "MAS", "MENOS", "MULTI", "POTENCIA", 
		"DIV", "MODULO", "ASIGSUM", "ASIGMIN", "IGUAL", "EQUALS", "DIFF", "MENOR", 
		"MENIGUAL", "MAYOR", "MAYIGUAL", "OR", "AND", "NOT", "PRINT", "FMT", "VAR", 
		"DCLIMPL", "INT", "FLOAT", "STRING", "BOOL", "RUNE", "T_INT", "T_FLOAT", 
		"T_STR", "T_BOOL", "T_RUNE", "ID", "WS", "COMENT", "MCOMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,46,291,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
		12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
		18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
		24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,
		31,1,31,1,32,4,32,178,8,32,11,32,12,32,179,1,33,4,33,183,8,33,11,33,12,
		33,184,1,33,1,33,4,33,189,8,33,11,33,12,33,190,1,34,1,34,1,34,1,34,5,34,
		197,8,34,10,34,12,34,200,9,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,3,35,213,8,35,1,36,1,36,5,36,217,8,36,10,36,12,36,220,9,
		36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,
		41,1,41,1,41,1,41,1,42,1,42,5,42,255,8,42,10,42,12,42,258,9,42,1,43,4,
		43,261,8,43,11,43,12,43,262,1,43,1,43,1,44,1,44,1,44,1,44,5,44,271,8,44,
		10,44,12,44,274,9,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,282,8,45,10,45,
		12,45,285,9,45,1,45,1,45,1,45,1,45,1,45,1,283,0,46,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
		30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
		42,85,43,87,44,89,45,91,46,1,0,7,1,0,48,57,1,0,34,34,1,0,39,39,2,0,65,
		90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,
		13,13,301,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,
		0,7,99,1,0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,13,105,1,0,0,0,15,107,1,0,
		0,0,17,109,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,115,1,0,0,0,25,117,
		1,0,0,0,27,119,1,0,0,0,29,121,1,0,0,0,31,123,1,0,0,0,33,125,1,0,0,0,35,
		128,1,0,0,0,37,131,1,0,0,0,39,133,1,0,0,0,41,136,1,0,0,0,43,139,1,0,0,
		0,45,141,1,0,0,0,47,144,1,0,0,0,49,146,1,0,0,0,51,149,1,0,0,0,53,152,1,
		0,0,0,55,155,1,0,0,0,57,157,1,0,0,0,59,165,1,0,0,0,61,169,1,0,0,0,63,173,
		1,0,0,0,65,177,1,0,0,0,67,182,1,0,0,0,69,192,1,0,0,0,71,212,1,0,0,0,73,
		214,1,0,0,0,75,223,1,0,0,0,77,227,1,0,0,0,79,235,1,0,0,0,81,242,1,0,0,
		0,83,247,1,0,0,0,85,252,1,0,0,0,87,260,1,0,0,0,89,266,1,0,0,0,91,277,1,
		0,0,0,93,94,5,40,0,0,94,2,1,0,0,0,95,96,5,41,0,0,96,4,1,0,0,0,97,98,5,
		123,0,0,98,6,1,0,0,0,99,100,5,125,0,0,100,8,1,0,0,0,101,102,5,91,0,0,102,
		10,1,0,0,0,103,104,5,93,0,0,104,12,1,0,0,0,105,106,5,59,0,0,106,14,1,0,
		0,0,107,108,5,46,0,0,108,16,1,0,0,0,109,110,5,58,0,0,110,18,1,0,0,0,111,
		112,5,44,0,0,112,20,1,0,0,0,113,114,5,43,0,0,114,22,1,0,0,0,115,116,5,
		45,0,0,116,24,1,0,0,0,117,118,5,42,0,0,118,26,1,0,0,0,119,120,5,94,0,0,
		120,28,1,0,0,0,121,122,5,47,0,0,122,30,1,0,0,0,123,124,5,37,0,0,124,32,
		1,0,0,0,125,126,5,43,0,0,126,127,5,61,0,0,127,34,1,0,0,0,128,129,5,45,
		0,0,129,130,5,61,0,0,130,36,1,0,0,0,131,132,5,61,0,0,132,38,1,0,0,0,133,
		134,5,61,0,0,134,135,5,61,0,0,135,40,1,0,0,0,136,137,5,33,0,0,137,138,
		5,61,0,0,138,42,1,0,0,0,139,140,5,60,0,0,140,44,1,0,0,0,141,142,5,60,0,
		0,142,143,5,61,0,0,143,46,1,0,0,0,144,145,5,62,0,0,145,48,1,0,0,0,146,
		147,5,62,0,0,147,148,5,61,0,0,148,50,1,0,0,0,149,150,5,124,0,0,150,151,
		5,124,0,0,151,52,1,0,0,0,152,153,5,38,0,0,153,154,5,38,0,0,154,54,1,0,
		0,0,155,156,5,33,0,0,156,56,1,0,0,0,157,158,5,80,0,0,158,159,5,114,0,0,
		159,160,5,105,0,0,160,161,5,110,0,0,161,162,5,116,0,0,162,163,5,108,0,
		0,163,164,5,110,0,0,164,58,1,0,0,0,165,166,5,102,0,0,166,167,5,109,0,0,
		167,168,5,116,0,0,168,60,1,0,0,0,169,170,5,118,0,0,170,171,5,97,0,0,171,
		172,5,114,0,0,172,62,1,0,0,0,173,174,5,58,0,0,174,175,5,61,0,0,175,64,
		1,0,0,0,176,178,7,0,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,
		0,179,180,1,0,0,0,180,66,1,0,0,0,181,183,7,0,0,0,182,181,1,0,0,0,183,184,
		1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,188,5,46,0,
		0,187,189,7,0,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,
		191,1,0,0,0,191,68,1,0,0,0,192,198,5,34,0,0,193,194,5,92,0,0,194,197,5,
		34,0,0,195,197,8,1,0,0,196,193,1,0,0,0,196,195,1,0,0,0,197,200,1,0,0,0,
		198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,
		5,34,0,0,202,70,1,0,0,0,203,204,5,116,0,0,204,205,5,114,0,0,205,206,5,
		117,0,0,206,213,5,101,0,0,207,208,5,102,0,0,208,209,5,97,0,0,209,210,5,
		108,0,0,210,211,5,115,0,0,211,213,5,101,0,0,212,203,1,0,0,0,212,207,1,
		0,0,0,213,72,1,0,0,0,214,218,5,39,0,0,215,217,8,2,0,0,216,215,1,0,0,0,
		217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,
		1,0,0,0,221,222,5,39,0,0,222,74,1,0,0,0,223,224,5,105,0,0,224,225,5,110,
		0,0,225,226,5,116,0,0,226,76,1,0,0,0,227,228,5,102,0,0,228,229,5,108,0,
		0,229,230,5,111,0,0,230,231,5,97,0,0,231,232,5,116,0,0,232,233,5,54,0,
		0,233,234,5,52,0,0,234,78,1,0,0,0,235,236,5,115,0,0,236,237,5,116,0,0,
		237,238,5,114,0,0,238,239,5,105,0,0,239,240,5,110,0,0,240,241,5,103,0,
		0,241,80,1,0,0,0,242,243,5,98,0,0,243,244,5,111,0,0,244,245,5,111,0,0,
		245,246,5,108,0,0,246,82,1,0,0,0,247,248,5,114,0,0,248,249,5,117,0,0,249,
		250,5,110,0,0,250,251,5,101,0,0,251,84,1,0,0,0,252,256,7,3,0,0,253,255,
		7,4,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,
		0,257,86,1,0,0,0,258,256,1,0,0,0,259,261,7,5,0,0,260,259,1,0,0,0,261,262,
		1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,6,43,0,
		0,265,88,1,0,0,0,266,267,5,47,0,0,267,268,5,47,0,0,268,272,1,0,0,0,269,
		271,8,6,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,
		0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,6,44,0,0,276,90,1,0,0,0,
		277,278,5,47,0,0,278,279,5,42,0,0,279,283,1,0,0,0,280,282,9,0,0,0,281,
		280,1,0,0,0,282,285,1,0,0,0,283,284,1,0,0,0,283,281,1,0,0,0,284,286,1,
		0,0,0,285,283,1,0,0,0,286,287,5,42,0,0,287,288,5,47,0,0,288,289,1,0,0,
		0,289,290,6,45,0,0,290,92,1,0,0,0,12,0,179,184,190,196,198,212,218,256,
		262,272,283,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
