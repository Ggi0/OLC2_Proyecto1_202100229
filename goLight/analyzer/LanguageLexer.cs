//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./LanguageLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACE=3, RBRACE=4, LBRACKET=5, RBRACKET=6, SEMICOLON=7, 
		DOT=8, COLON=9, COMMA=10, MAS=11, MENOS=12, MULTI=13, POTENCIA=14, DIV=15, 
		MODULO=16, ASIGSUM=17, ASIGMIN=18, IGUAL=19, EQUALS=20, DIFF=21, MENOR=22, 
		MENIGUAL=23, MAYOR=24, MAYIGUAL=25, OR=26, AND=27, NOT=28, PRINT=29, FMT=30, 
		VAR=31, DCLIMPL=32, IF=33, ELSE=34, SWITCH=35, CASE=36, DEFAUL=37, FOR=38, 
		INT=39, FLOAT=40, STRING=41, BOOL=42, RUNE=43, T_INT=44, T_FLOAT=45, T_STR=46, 
		T_BOOL=47, T_RUNE=48, ID=49, WS=50, COMENT=51, MCOMENT=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", 
		"DOT", "COLON", "COMMA", "MAS", "MENOS", "MULTI", "POTENCIA", "DIV", "MODULO", 
		"ASIGSUM", "ASIGMIN", "IGUAL", "EQUALS", "DIFF", "MENOR", "MENIGUAL", 
		"MAYOR", "MAYIGUAL", "OR", "AND", "NOT", "PRINT", "FMT", "VAR", "DCLIMPL", 
		"IF", "ELSE", "SWITCH", "CASE", "DEFAUL", "FOR", "INT", "FLOAT", "STRING", 
		"BOOL", "RUNE", "T_INT", "T_FLOAT", "T_STR", "T_BOOL", "T_RUNE", "ID", 
		"WS", "COMENT", "MCOMENT"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", "':'", "','", 
		"'+'", "'-'", "'*'", "'^'", "'/'", "'%'", "'+='", "'-='", "'='", "'=='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", "'!'", "'Println'", 
		"'fmt'", "'var'", "':='", "'if'", "'else'", "'switch'", "'case'", "'default'", 
		"'for'", null, null, null, null, null, "'int'", "'float64'", "'string'", 
		"'bool'", "'rune'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
		"SEMICOLON", "DOT", "COLON", "COMMA", "MAS", "MENOS", "MULTI", "POTENCIA", 
		"DIV", "MODULO", "ASIGSUM", "ASIGMIN", "IGUAL", "EQUALS", "DIFF", "MENOR", 
		"MENIGUAL", "MAYOR", "MAYIGUAL", "OR", "AND", "NOT", "PRINT", "FMT", "VAR", 
		"DCLIMPL", "IF", "ELSE", "SWITCH", "CASE", "DEFAUL", "FOR", "INT", "FLOAT", 
		"STRING", "BOOL", "RUNE", "T_INT", "T_FLOAT", "T_STR", "T_BOOL", "T_RUNE", 
		"ID", "WS", "COMENT", "MCOMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LanguageLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,335,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
		13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,
		19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
		24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
		32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		37,1,37,1,37,1,37,1,38,4,38,222,8,38,11,38,12,38,223,1,39,4,39,227,8,39,
		11,39,12,39,228,1,39,1,39,4,39,233,8,39,11,39,12,39,234,1,40,1,40,1,40,
		1,40,5,40,241,8,40,10,40,12,40,244,9,40,1,40,1,40,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,3,41,257,8,41,1,42,1,42,5,42,261,8,42,10,42,12,
		42,264,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
		1,47,1,47,1,47,1,47,1,47,1,48,1,48,5,48,299,8,48,10,48,12,48,302,9,48,
		1,49,4,49,305,8,49,11,49,12,49,306,1,49,1,49,1,50,1,50,1,50,1,50,5,50,
		315,8,50,10,50,12,50,318,9,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,326,8,
		51,10,51,12,51,329,9,51,1,51,1,51,1,51,1,51,1,51,1,327,0,52,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
		81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
		52,1,0,7,1,0,48,57,1,0,34,34,1,0,39,39,2,0,65,90,97,122,4,0,48,57,65,90,
		95,95,97,122,3,0,9,10,12,13,32,32,2,0,10,10,13,13,345,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
		0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,111,1,0,
		0,0,9,113,1,0,0,0,11,115,1,0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,17,121,
		1,0,0,0,19,123,1,0,0,0,21,125,1,0,0,0,23,127,1,0,0,0,25,129,1,0,0,0,27,
		131,1,0,0,0,29,133,1,0,0,0,31,135,1,0,0,0,33,137,1,0,0,0,35,140,1,0,0,
		0,37,143,1,0,0,0,39,145,1,0,0,0,41,148,1,0,0,0,43,151,1,0,0,0,45,153,1,
		0,0,0,47,156,1,0,0,0,49,158,1,0,0,0,51,161,1,0,0,0,53,164,1,0,0,0,55,167,
		1,0,0,0,57,169,1,0,0,0,59,177,1,0,0,0,61,181,1,0,0,0,63,185,1,0,0,0,65,
		188,1,0,0,0,67,191,1,0,0,0,69,196,1,0,0,0,71,203,1,0,0,0,73,208,1,0,0,
		0,75,216,1,0,0,0,77,221,1,0,0,0,79,226,1,0,0,0,81,236,1,0,0,0,83,256,1,
		0,0,0,85,258,1,0,0,0,87,267,1,0,0,0,89,271,1,0,0,0,91,279,1,0,0,0,93,286,
		1,0,0,0,95,291,1,0,0,0,97,296,1,0,0,0,99,304,1,0,0,0,101,310,1,0,0,0,103,
		321,1,0,0,0,105,106,5,40,0,0,106,2,1,0,0,0,107,108,5,41,0,0,108,4,1,0,
		0,0,109,110,5,123,0,0,110,6,1,0,0,0,111,112,5,125,0,0,112,8,1,0,0,0,113,
		114,5,91,0,0,114,10,1,0,0,0,115,116,5,93,0,0,116,12,1,0,0,0,117,118,5,
		59,0,0,118,14,1,0,0,0,119,120,5,46,0,0,120,16,1,0,0,0,121,122,5,58,0,0,
		122,18,1,0,0,0,123,124,5,44,0,0,124,20,1,0,0,0,125,126,5,43,0,0,126,22,
		1,0,0,0,127,128,5,45,0,0,128,24,1,0,0,0,129,130,5,42,0,0,130,26,1,0,0,
		0,131,132,5,94,0,0,132,28,1,0,0,0,133,134,5,47,0,0,134,30,1,0,0,0,135,
		136,5,37,0,0,136,32,1,0,0,0,137,138,5,43,0,0,138,139,5,61,0,0,139,34,1,
		0,0,0,140,141,5,45,0,0,141,142,5,61,0,0,142,36,1,0,0,0,143,144,5,61,0,
		0,144,38,1,0,0,0,145,146,5,61,0,0,146,147,5,61,0,0,147,40,1,0,0,0,148,
		149,5,33,0,0,149,150,5,61,0,0,150,42,1,0,0,0,151,152,5,60,0,0,152,44,1,
		0,0,0,153,154,5,60,0,0,154,155,5,61,0,0,155,46,1,0,0,0,156,157,5,62,0,
		0,157,48,1,0,0,0,158,159,5,62,0,0,159,160,5,61,0,0,160,50,1,0,0,0,161,
		162,5,124,0,0,162,163,5,124,0,0,163,52,1,0,0,0,164,165,5,38,0,0,165,166,
		5,38,0,0,166,54,1,0,0,0,167,168,5,33,0,0,168,56,1,0,0,0,169,170,5,80,0,
		0,170,171,5,114,0,0,171,172,5,105,0,0,172,173,5,110,0,0,173,174,5,116,
		0,0,174,175,5,108,0,0,175,176,5,110,0,0,176,58,1,0,0,0,177,178,5,102,0,
		0,178,179,5,109,0,0,179,180,5,116,0,0,180,60,1,0,0,0,181,182,5,118,0,0,
		182,183,5,97,0,0,183,184,5,114,0,0,184,62,1,0,0,0,185,186,5,58,0,0,186,
		187,5,61,0,0,187,64,1,0,0,0,188,189,5,105,0,0,189,190,5,102,0,0,190,66,
		1,0,0,0,191,192,5,101,0,0,192,193,5,108,0,0,193,194,5,115,0,0,194,195,
		5,101,0,0,195,68,1,0,0,0,196,197,5,115,0,0,197,198,5,119,0,0,198,199,5,
		105,0,0,199,200,5,116,0,0,200,201,5,99,0,0,201,202,5,104,0,0,202,70,1,
		0,0,0,203,204,5,99,0,0,204,205,5,97,0,0,205,206,5,115,0,0,206,207,5,101,
		0,0,207,72,1,0,0,0,208,209,5,100,0,0,209,210,5,101,0,0,210,211,5,102,0,
		0,211,212,5,97,0,0,212,213,5,117,0,0,213,214,5,108,0,0,214,215,5,116,0,
		0,215,74,1,0,0,0,216,217,5,102,0,0,217,218,5,111,0,0,218,219,5,114,0,0,
		219,76,1,0,0,0,220,222,7,0,0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,
		1,0,0,0,223,224,1,0,0,0,224,78,1,0,0,0,225,227,7,0,0,0,226,225,1,0,0,0,
		227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,232,
		5,46,0,0,231,233,7,0,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,
		0,234,235,1,0,0,0,235,80,1,0,0,0,236,242,5,34,0,0,237,238,5,92,0,0,238,
		241,5,34,0,0,239,241,8,1,0,0,240,237,1,0,0,0,240,239,1,0,0,0,241,244,1,
		0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,
		245,246,5,34,0,0,246,82,1,0,0,0,247,248,5,116,0,0,248,249,5,114,0,0,249,
		250,5,117,0,0,250,257,5,101,0,0,251,252,5,102,0,0,252,253,5,97,0,0,253,
		254,5,108,0,0,254,255,5,115,0,0,255,257,5,101,0,0,256,247,1,0,0,0,256,
		251,1,0,0,0,257,84,1,0,0,0,258,262,5,39,0,0,259,261,8,2,0,0,260,259,1,
		0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,
		264,262,1,0,0,0,265,266,5,39,0,0,266,86,1,0,0,0,267,268,5,105,0,0,268,
		269,5,110,0,0,269,270,5,116,0,0,270,88,1,0,0,0,271,272,5,102,0,0,272,273,
		5,108,0,0,273,274,5,111,0,0,274,275,5,97,0,0,275,276,5,116,0,0,276,277,
		5,54,0,0,277,278,5,52,0,0,278,90,1,0,0,0,279,280,5,115,0,0,280,281,5,116,
		0,0,281,282,5,114,0,0,282,283,5,105,0,0,283,284,5,110,0,0,284,285,5,103,
		0,0,285,92,1,0,0,0,286,287,5,98,0,0,287,288,5,111,0,0,288,289,5,111,0,
		0,289,290,5,108,0,0,290,94,1,0,0,0,291,292,5,114,0,0,292,293,5,117,0,0,
		293,294,5,110,0,0,294,295,5,101,0,0,295,96,1,0,0,0,296,300,7,3,0,0,297,
		299,7,4,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,
		0,0,0,301,98,1,0,0,0,302,300,1,0,0,0,303,305,7,5,0,0,304,303,1,0,0,0,305,
		306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,6,
		49,0,0,309,100,1,0,0,0,310,311,5,47,0,0,311,312,5,47,0,0,312,316,1,0,0,
		0,313,315,8,6,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,
		317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,6,50,0,0,320,102,1,
		0,0,0,321,322,5,47,0,0,322,323,5,42,0,0,323,327,1,0,0,0,324,326,9,0,0,
		0,325,324,1,0,0,0,326,329,1,0,0,0,327,328,1,0,0,0,327,325,1,0,0,0,328,
		330,1,0,0,0,329,327,1,0,0,0,330,331,5,42,0,0,331,332,5,47,0,0,332,333,
		1,0,0,0,333,334,6,51,0,0,334,104,1,0,0,0,12,0,223,228,234,240,242,256,
		262,300,306,316,327,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
